package com.gpdi.hqplus.complaint.controller.web;

import com.gpdi.hqplus.common.constants.ErrorCode;
import com.gpdi.hqplus.common.entity.vo.JsonResultVO;
import com.gpdi.hqplus.common.exception.ApplicationException;
import com.gpdi.hqplus.complaint.entity.TypeComplaint;
import com.gpdi.hqplus.complaint.entity.query.TypeComplaintQuery;
import com.gpdi.hqplus.complaint.entity.vo.ExtendValVo;
import com.gpdi.hqplus.complaint.entity.vo.TypeComplaintVo;
import com.gpdi.hqplus.complaint.service.ITypeComplaintService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * 意见反馈分类控制器
 * @Author qf
 * @Date 2019/7/16
 * @Version 1.0
 */
@Api
@Slf4j
@RestController
@RequestMapping("/v1/app/resources/typeComplaint")
public class TypeComplaintController {

    @Autowired
    private ITypeComplaintService typeComplaintService;

    /**
     * 增加分类
     * @param typeComplaintQuery
     * @return
     */
    @ApiOperation(value = "增加分类",notes = "增加分类")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "name", value = "意见分类名称", required = true, dataType = "string", paramType = "path"),
            @ApiImplicitParam(name = "departmentId", value = "部门id", required = true, dataType = "int", paramType = "path"),
            @ApiImplicitParam(name = "departmentName", value = "部门名称", required = true, dataType = "string", paramType = "path")
    })
    @RequestMapping("/insert")
    public String insertType(@RequestBody TypeComplaintQuery typeComplaintQuery){
        if (typeComplaintQuery == null) {
            log.error("complaint type param error.");
            throw new ApplicationException(ErrorCode.SERVICE_ERROR,"接收的参数不能为空");
        }

//      装配vo
        TypeComplaintVo typeComplaintVo = new TypeComplaintVo();
        typeComplaintVo.setName(typeComplaintQuery.getName());
        ExtendValVo vo = new ExtendValVo();
        vo.setDepartmentId(typeComplaintQuery.getDepartmentId());
        vo.setDepartmentName(typeComplaintQuery.getDepartmentName());
        typeComplaintVo.setExtendVal(vo);

        typeComplaintService.insertType(typeComplaintVo);
        return "ok";
    }

    /**
     * 根据Id删除分类
     * @param id
     * @return
     */
    @ApiOperation(value = "删除分类", notes = "删除分类")
    @ApiImplicitParam(name = "id", value = "id", required = true, dataType = "string", paramType = "path")
    @GetMapping("/delete/{id}")
    public String deleteType(@PathVariable("id") Long id){
        typeComplaintService.deleteTypeById(id);
        return "ok";
    }

    /**
     * 修改分类
     * @param typeComplaintQuery
     * @return
     */
    @ApiOperation(value = "修改分类", notes = "修改分类")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "id", required = true, dataType = "string", paramType = "path"),
            @ApiImplicitParam(name = "name", value = "意见分类名称", required = true, dataType = "string", paramType = "path"),
            @ApiImplicitParam(name = "departmentId", value = "部门id", required = true, dataType = "int", paramType = "path"),
            @ApiImplicitParam(name = "departmentName", value = "部门名称", required = true, dataType = "string", paramType = "path")
    })
    @RequestMapping("/update")
    public String updateType(@RequestBody TypeComplaintQuery typeComplaintQuery){
        if (typeComplaintQuery == null) {
            log.error("complaint type param error.");
            throw new ApplicationException(ErrorCode.SERVICE_ERROR,"接收的参数不能为空");
        }

        //装配vo
        TypeComplaintVo typeComplaintVo = new TypeComplaintVo();
        typeComplaintVo.setId(typeComplaintQuery.getId());
        typeComplaintVo.setName(typeComplaintQuery.getName());
        ExtendValVo vo = new ExtendValVo();
        vo.setDepartmentId(typeComplaintQuery.getDepartmentId());
        vo.setDepartmentName(typeComplaintQuery.getDepartmentName());
        typeComplaintVo.setExtendVal(vo);

        typeComplaintService.updateTypeById(typeComplaintVo);
        return "ok";
    }

    /**
     * 查询所有分类
     * @return
     */
    @ApiOperation(value = "查询所有分类", notes = "查询所有分类")
    @RequestMapping("/list")
    public JsonResultVO<List<TypeComplaint>> listType(){
        List<TypeComplaint> typeComplaints = typeComplaintService.listType();

        return JsonResultVO.success(typeComplaints);
    }

    /**
     * 查询单条分类记录
     * @param id
     * @return
     */
    @ApiOperation(value = "查询单条分类记录", notes = "查询单条分类记录")
    @ApiImplicitParam(name = "id", value = "id", required = true, dataType = "string", paramType = "path")
    @GetMapping("/query/{id}")
    public JsonResultVO<TypeComplaint> queryTypeById(@PathVariable("id") Long id){
        if (id == null) {
            log.error("query type param id error.");
            throw new ApplicationException(ErrorCode.SERVICE_ERROR, "输入的参数有误");
        }

        TypeComplaint typeComplaint = typeComplaintService.queryTypeById(id);

        return JsonResultVO.success(typeComplaint);
    }
}
