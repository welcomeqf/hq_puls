package com.gpdi.hqplus.complaint.controller.app;

import com.gpdi.hqplus.common.constants.ErrorCode;
import com.gpdi.hqplus.common.entity.vo.JsonResultVO;
import com.gpdi.hqplus.common.exception.ApplicationException;
import com.gpdi.hqplus.complaint.cnastants.ComplaintHandleEnum;
import com.gpdi.hqplus.complaint.entity.Complaint;
import com.gpdi.hqplus.complaint.entity.query.ComplaintQuery;
import com.gpdi.hqplus.complaint.service.IComplaintService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

/**
 * 用户端的意见反馈控制器
 * @Author qf
 * @Date 2019/7/11
 * @Version 1.0
 */
@Api
@Slf4j
@RestController
@RequestMapping("/v1/app/resources/complaint")
public class ComplaintController {

    @Autowired
    private IComplaintService complaintService;

    /**
     * 根据Id查询投诉建议的进度流程
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "查看流程进度", notes = "查看流程进度")
    @ApiImplicitParam(name = "id", value = "id", required = true, dataType = "string", paramType = "path")
    @GetMapping("/process/{id}")
    public JsonResultVO<String> queryProcess(@PathVariable("id") Long id) {
        Complaint complaint = complaintService.queryById(id);
        if (complaint == null) {
            log.error("complaint query fail...");
            throw new ApplicationException(ErrorCode.SERVICE_ERROR,"查询流程失败！！");
        }
        String status = complaint.getStatus();
        String result = null;
        if (status == null) {
            log.error("complaint query process fail.");
            throw new ApplicationException(ErrorCode.SERVICE_ERROR, "查询流程进度失败~");
        }
        if (ComplaintHandleEnum.APPLY.getStatus().equals(status)) {
            result = "正在申请中...";
        } else if (ComplaintHandleEnum.FEEDBACK.getStatus().equals(status)) {
            result = "正在反馈..";
        } else if (ComplaintHandleEnum.TRANSFER.getStatus().equals(status)) {
            result = "正在审核，审核成功将转派给相关业务部门处理...";
        } else if (ComplaintHandleEnum.HANDLE.getStatus().equals(status)) {
            result = "业务部门正在处理中...";
        } else if (ComplaintHandleEnum.FINISH.getStatus().equals(status)) {
            result = "处理完成...";
        } else if (ComplaintHandleEnum.CANCEL.getStatus().equals(status)) {
            result = "反馈已经取消...";
        }
        return JsonResultVO.success(result);
    }

    /**
     * 申请意见反馈
     *
     * @param complaintQuery
     * @return
     */
    @ApiOperation(value = "申请意见反馈", notes = "申请意见反馈")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "type", value = "类型", required = true, dataType = "string", paramType = "path"),
            @ApiImplicitParam(name = "message", value = "留言消息", required = true, dataType = "string", paramType = "path"),
    })
    @RequestMapping("/apply")
    public String insertComplaint(@RequestBody ComplaintQuery complaintQuery) {
        complaintService.apply(complaintQuery);
        return "ok";
    }

}
